<Window x:Class="SoftwareHelper.Views.MainView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:shell="http://schemas.microsoft.com/winfx/2006/xaml/presentation/shell"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:drag="urn:gong-wpf-dragdrop"
        xmlns:vm="clr-namespace:SoftwareHelper.ViewModels"
        xmlns:CustomControls="clr-namespace:SoftwareHelper.CustomControls"
        xmlns:helpers="clr-namespace:SoftwareHelper.Helpers"
        xmlns:views="clr-namespace:SoftwareHelper.Views"
        mc:Ignorable="d" ResizeMode="NoResize"
        TextOptions.TextFormattingMode="Display" UseLayoutRounding="True"
        SnapsToDevicePixels="True" WindowStyle="None" Background="Transparent"
        Title="SoftwareHelper" Height="600" Width="120"
        ShowInTaskbar="False" x:Name="myWindow">
    <shell:WindowChrome.WindowChrome>
        <shell:WindowChrome GlassFrameThickness="-1" CaptionHeight="0"/>
    </shell:WindowChrome.WindowChrome>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding ViewLoaded}" CommandParameter="{Binding ElementName=myNotifyIcon}"></i:InvokeCommandAction>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <FrameworkElement.DataContext>
        <vm:MainVM/>
    </FrameworkElement.DataContext>
    <FrameworkElement.RenderTransform>
        <TransformGroup>
            <TranslateTransform x:Name="translateForm"/>
        </TransformGroup>
    </FrameworkElement.RenderTransform>
    <FrameworkElement.Resources>

        <helpers:DarkAndLightConvert x:Key="darkAndLightConvert"/>
        <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"/>

        <SolidColorBrush x:Key="TitleBarBackgroundBrush" Color="#FF819F" />
        <Style x:Key="CloseButton" TargetType="{x:Type Button}">
            <Setter Property="ToolTip" Value="Remove"/>
            <Setter Property="Foreground" Value="{DynamicResource NormalBlackBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Ellipse x:Name="_Ellipse" Height="12" Width="12"
                                     Fill="{DynamicResource NormalWhiteBrush}"
                                     Opacity=".8"/>
                            <ContentPresenter Name="TextArea"/>
                        </Grid>
                       
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <!--<Setter Property="Fill" TargetName="_Ellipse" Value="{StaticResource TitleBarBackgroundBrush}"/>-->
                                <Setter Property="Fill" TargetName="_Ellipse" Value="{StaticResource TitleBarBackgroundBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <!--<Setter Property="Fill" TargetName="_Ellipse" Value="{StaticResource TitleBarBackgroundBrush}"/>-->
                                <Setter Property="Margin" TargetName="TextArea" Value="0,2,0,0"/>
                            </Trigger>
                            <!--<Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="Border" Value="#B7B7B7"/>
                            </Trigger>-->
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Geometry x:Key="DragPath">M256 384h128v-128h-128v128zM448 384h128v-128h-128v128zM640 256v128h128v-128h-128zM256 576h128v-128h-128v128zM448 576h128v-128h-128v128zM640 576h128v-128h-128v128zM256 768h128v-128h-128v128zM448 768h128v-128h-128v128zM640 768h128v-128h-128v128z</Geometry>
        <DataTemplate x:Key="ApplicationTemplate">
            <DataTemplate.Resources>
                <Storyboard x:Key="OnMouseEnter">
                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                        <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                        <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.3"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                        <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                        <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1.3"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.Opacity)">
                        <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
                        <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1"/>
                    </DoubleAnimationUsingKeyFrames>
                </Storyboard>
                <Storyboard x:Key="OnMouseLeave">
                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                        <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.3"/>
                        <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                        <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.3"/>
                        <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                    </DoubleAnimationUsingKeyFrames>
                </Storyboard>
            </DataTemplate.Resources>
            <Border RenderTransformOrigin="0.5,0.5" x:Name="border" 
                    Padding="4" Cursor="Hand" MaxHeight="90" Background="Transparent">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding DataContext.SelectionChangedCommand,RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="{Binding}"></i:InvokeCommandAction>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Border.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                        <SkewTransform AngleX="0" AngleY="0"/>
                        <RotateTransform Angle="0"/>
                        <TranslateTransform X="0" Y="0"/>
                    </TransformGroup>
                </Border.RenderTransform>
                <Grid>
                    <StackPanel Orientation="Vertical">
                        <Image Source="{Binding IconPath}" Margin="0,4,0,0"/>
                        <TextBlock Text="{Binding Name}" 
                               MaxWidth="70" TextWrapping="Wrap"
                               VerticalAlignment="Center"
                               Block.TextAlignment="Center" 
                               HorizontalAlignment="Center"
                               Foreground="{DynamicResource NormalWhiteBrush}"/>
                    </StackPanel>
                    <Button x:Name="PART_Button" Style="{StaticResource CloseButton}"
                        HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="30,0,0,0"
                        Cursor="Hand" Visibility="{Binding DataContext.IsDragDrop,RelativeSource={RelativeSource AncestorType=Window},Converter={StaticResource booleanToVisibilityConverter}}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:InvokeCommandAction Command="{Binding DataContext.RemoveApplictionCommand,RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="{Binding}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Button.Content>
                            <Path Data="{StaticResource ClosePath}" StrokeThickness="0.5"
                                  Stretch="Fill" Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" 
                                  Height="6" Width="6"/>
                        </Button.Content>
                    </Button>
                </Grid>
                
                
            </Border>
            <!--<DataTemplate.Triggers>
                <EventTrigger RoutedEvent="Mouse.MouseEnter" SourceName="border">
                    <BeginStoryboard Storyboard="{StaticResource OnMouseEnter}"/>
                </EventTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseLeave" SourceName="border">
                    <BeginStoryboard Storyboard="{StaticResource OnMouseLeave}"/>
                </EventTrigger>
            </DataTemplate.Triggers>-->
            <DataTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                        <Condition Property="Visibility" SourceName="PART_Button"  Value="Collapsed"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource OnMouseEnter}"/>
                    </MultiTrigger.EnterActions>
                    <MultiTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource OnMouseLeave}"/>
                    </MultiTrigger.ExitActions>
                </MultiTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <!--<LinearGradientBrush x:Key="NormalColors"
				EndPoint="0.5,1"
				StartPoint="0.5,0">
            <GradientStop
					Color="#FF33B9AD"
					Offset="0" />
            <GradientStop
					Color="#FF007ACC"
					Offset="1" />
        </LinearGradientBrush>-->

        <!--<SolidColorBrush x:Key="NormalColors" Color="Black"/>-->


        <Storyboard x:Key="WindowPutItAway">
            <DoubleAnimation Storyboard.TargetName="myWindow" 
                             Storyboard.TargetProperty="(Window.Height)" 
                             To="60" BeginTime="0:0:0" Duration="0:0:00.10"/>
            <DoubleAnimation Storyboard.TargetName="myWindow" 
                             Storyboard.TargetProperty="(Window.Width)" 
                             To="30" BeginTime="0:0:00.10" Duration="0:0:00.101"/>
            <!--<DoubleAnimation Storyboard.TargetName="PutItAwayBorder" 
                             Storyboard.TargetProperty="(Button.Opacity)" 
                             To="0"/>
            
            <DoubleAnimation Storyboard.TargetName="StretchOutBorder" 
                             Storyboard.TargetProperty="(Button.Opacity)" 
                             To="1"/>
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="StretchOutBorder"
                        Storyboard.TargetProperty="Visibility">
                <DiscreteObjectKeyFrame KeyTime="0:0:5" Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>-->
        </Storyboard>

        <Storyboard x:Key="WindowStretchOut">
            <DoubleAnimation Storyboard.TargetName="myWindow" 
                             Storyboard.TargetProperty="(Window.Width)" 
                             To="110" BeginTime="0:0:0" Duration="0:0:00.02"/>
            <DoubleAnimation Storyboard.TargetName="myWindow" 
                             Storyboard.TargetProperty="(Window.Height)" 
                             To="600" BeginTime="0:0:00.02" Duration="0:0:00.32"/>

            <!--<DoubleAnimation Storyboard.TargetName="StretchOutBorder" 
                             Storyboard.TargetProperty="(Button.Opacity)" 
                             To="1"/>
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="StretchOutBorder"
                        Storyboard.TargetProperty="Visibility">
                <DiscreteObjectKeyFrame KeyTime="0:0:5" Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimation Storyboard.TargetName="StretchOutBorder" 
                             Storyboard.TargetProperty="(Button.Opacity)" 
                             To="0"/>-->

        </Storyboard>

        <LinearGradientBrush x:Key="DefaultBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#E2EAF3" Offset="0" />
            <GradientStop Color="#C3CEDC" Offset="0.45" />
            <GradientStop Color="#A2B1C4" Offset="0.45" />
            <GradientStop Color="#B4C3DB" Offset="1" />
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="MouseOverBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#ADCEE8" Offset="0" />
            <GradientStop Color="#70A3C7" Offset="0.45" />
            <GradientStop Color="#1E6FA5" Offset="0.45" />
            <GradientStop Color="#2782B4" Offset="0.80" />
            <GradientStop Color="#17FBFA" Offset="1" />
        </LinearGradientBrush>

        <Style x:Key="tbSwitchMiniAndNormal" TargetType="{x:Type ToggleButton}">
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="ToolTip" Value="Mini"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid x:Name="PART_Grid">
                            <Rectangle x:Name="PART_Rectangle" Fill="{DynamicResource DefaultBackgroundBrush}"/>
                            <Path x:Name="_Path" Data="{DynamicResource PutItAwayPath}" Fill="{StaticResource NormalBlackBrush}"
                                  Stretch="Fill" Width="10" Height="10"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <!--<Setter Property="Opacity" TargetName="PART_Rectangle" Value="1"/>-->
                                <Setter Property="Fill" TargetName="PART_Rectangle" Value="{DynamicResource MouseOverBackgroundBrush}" />
                                <Setter Property="Fill" Value="{DynamicResource NormalWhiteBrush}" TargetName="_Path"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Data" Value="{DynamicResource StretchOutPath}" TargetName="_Path"/>
                                <Setter Property="ToolTip" Value="Normal"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Margin" Value="0,2,0,0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Button}">
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="ToolTip" Value="Exit"/>
            <Setter Property="Foreground" Value="{StaticResource NormalBlackBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="PART_Grid">
                            <Rectangle x:Name="PART_Rectangle" Fill="{DynamicResource DefaultBackgroundBrush}"/>
                            <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <!--<Setter Property="Opacity" TargetName="PART_Rectangle" Value="1"/>-->
                                <Setter Property="Fill" TargetName="PART_Rectangle" Value="{DynamicResource MouseOverBackgroundBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource NormalWhiteBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Margin" Value="0,2,0,0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        

    </FrameworkElement.Resources>
    <!--<FrameworkElement.Resources>
        <ResourceDictionary>
            <Storyboard
				RepeatBehavior="Forever"
				x:Key="Color">
                <ColorAnimationUsingKeyFrames
					Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
					Storyboard.TargetName="PageGround">
                    <EasingColorKeyFrame
						KeyTime="0:0:2"
						Value="#FFDD94FF" />
                    <EasingColorKeyFrame
						KeyTime="0:0:4"
						Value="#FFC282FF" />
                    <EasingColorKeyFrame
						KeyTime="0:0:6"
						Value="#FFFF9090" />
                    <EasingColorKeyFrame
						KeyTime="0:0:8"
						Value="#FFE6FF90" />
                    <EasingColorKeyFrame
						KeyTime="0:0:10"
						Value="#FF33B9AD" />
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames
					Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
					Storyboard.TargetName="PageGround">
                    <EasingColorKeyFrame
						KeyTime="0:0:2"
						Value="#FF00CCA7" />
                    <EasingColorKeyFrame
						KeyTime="0:0:4"
						Value="#FF4578B2" />
                    <EasingColorKeyFrame
						KeyTime="0:0:6"
						Value="#FF5C89BD" />
                    <EasingColorKeyFrame
						KeyTime="0:0:8"
						Value="#FF1CDCA8" />
                    <EasingColorKeyFrame
						KeyTime="0:0:10"
						Value="#FF007ACC" />
                </ColorAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames
					Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Offset)"
					Storyboard.TargetName="PageGround">
                    <EasingDoubleKeyFrame
						KeyTime="0:0:2"
						Value="0" />
                    <EasingDoubleKeyFrame
						KeyTime="0:0:4"
						Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames
					Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Offset)"
					Storyboard.TargetName="PageGround">
                    <EasingDoubleKeyFrame
						KeyTime="0:0:2"
						Value="1" />
                    <EasingDoubleKeyFrame
						KeyTime="0:0:4"
						Value="1" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames
					Storyboard.TargetProperty="(Panel.Background).(Brush.RelativeTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
					Storyboard.TargetName="PageGround">
                    <EasingDoubleKeyFrame
						KeyTime="0"
						Value="0" />
                    <EasingDoubleKeyFrame
						KeyTime="0:0:10"
						Value="720" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ResourceDictionary>
    </FrameworkElement.Resources>-->
    <!--<FrameworkElement.Triggers>
        <EventTrigger
			RoutedEvent="FrameworkElement.Loaded">
            <BeginStoryboard
				Storyboard="{StaticResource Color}" />
        </EventTrigger>
    </FrameworkElement.Triggers>-->
    <Grid  Name="MyGrid">
        <tb:TaskbarIcon x:Name="myNotifyIcon"
                    IconSource="/comic.ico"
                    PopupActivation="DoubleClick"
                    NoLeftClickDelay="True"
                    TrayLeftMouseUp="myNotifyIcon_TrayLeftMouseUp">
            <tb:TaskbarIcon.TrayToolTip>
                <Border
                            Padding="8"
                            Background="{StaticResource NormalWhiteBrush}"
                            BorderBrush="{StaticResource NormalBlackBrush}"
                            BorderThickness="1"
                            TextElement.Foreground="{StaticResource NormalBlackBrush}">
                    <StackPanel Orientation="Vertical">
                        <!--  Title  -->
                        <TextBlock
                                    Margin="0,0,0,2"
                                    FontSize="15"
                                    FontWeight="Medium"
                                    Text="SoftwareHelper" />
                        <TextBlock Text="授之以鱼，不如授之以渔"/>

                    </StackPanel>
                </Border>
            </tb:TaskbarIcon.TrayToolTip>
            <tb:TaskbarIcon.ContextMenu>
                <ContextMenu PlacementTarget="{Binding ElementName=myNotifyIcon}">
                    <ContextMenu.Resources>
                        <Style TargetType="{x:Type Path}">
                            <Setter Property="Height" Value="15"/>
                            <Setter Property="Width" Value="15"/>
                            <Setter Property="Fill" Value="{DynamicResource NormalMenuBlackBrush}"/>
                            <Setter Property="Stretch" Value="Fill"/>
                        </Style>
                    </ContextMenu.Resources>
                    <MenuItem Header="QQ群">
                        <MenuItem.ToolTip>
                            <ToolTip>
                                <Rectangle Width="200" Height="300">
                                    <Rectangle.Fill>
                                        <ImageBrush ImageSource="/SoftwareHelper;component/Images/20201130100057.png"
                                                    Stretch="Uniform"/>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </ToolTip>
                        </MenuItem.ToolTip>
                    </MenuItem>
                    <MenuItem Header="关于" Command="{Binding GithubCommand}">
                        <MenuItem.Icon>
                            <Path Data="{DynamicResource GithubPath}"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <!--<MenuItem Header="边缘隐藏" 
                              Checked="MenuItemEdgeHide_Checked" 
                              Unchecked="MenuItemEdgeHide_Unchecked" 
                              IsCheckable="True"
                              IsChecked="{Binding IsEdgeHide,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay,RelativeSource={RelativeSource AncestorType={x:Type views:MainView}}}"/>-->
                    <!--<MenuItem Header="边缘隐藏" x:Name="MenuItemEdgeHide"
                              Checked="MenuItemEdgeHide_Checked" 
                              Unchecked="MenuItemEdgeHide_Unchecked" 
                              IsCheckable="True"/>-->
                    <MenuItem Header="透明度" ItemsSource="{Binding Path=OpacityItemList}" DisplayMemberPath="ItemName">
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="IsCheckable" Value="True"/>
                                <Setter Property="IsChecked" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
                                <Setter Property="Padding" Value="2 6 2 6" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                        <!--<MenuItem Header="100%" IsCheckable="True"/>
                        <MenuItem Header="80%" IsCheckable="True"/>
                        <MenuItem Header="60%" IsCheckable="True"/>
                        <MenuItem Header="40%" IsCheckable="True"/>
                        <MenuItem Header="20%" IsCheckable="True"/>-->
                    </MenuItem>
                    <MenuItem Header="颜色拾取" Command="{Binding ColorCommand}"/>
                    <MenuItem Header="{Binding IsDark,Converter={StaticResource darkAndLightConvert}}" Command="{Binding ThemesCommand}"/>
                    <MenuItem Header="关闭" Command="{Binding ExitCommand}"/>
                </ContextMenu>
            </tb:TaskbarIcon.ContextMenu>
        </tb:TaskbarIcon>
        <!--<Rectangle Opacity=".6" Margin="10" Fill="Black" RadiusX="2" RadiusY="2"/>-->
        <Rectangle Opacity="{Binding MainOpacity}" Margin="30,10,0,10"
                   Name="PageGround" Fill="{DynamicResource NormalBlackBrush}" Effect="{DynamicResource NormalShadowDepth}">
            <!--<Rectangle.Effect>
                <DropShadowEffect ShadowDepth="1" BlurRadius="6" Direction="270" Opacity="0.75" Color="#FF211613"/>
                -->
            <!--<BlurEffect KernelType="Gaussian" Radius="60" />-->
            <!--
            </Rectangle.Effect>-->
        </Rectangle>

        <Grid HorizontalAlignment="Left" VerticalAlignment="Top"
              Margin="10,10,0,0"
              Visibility="{Binding IsEdgeHide,Converter={StaticResource bool2VisibilityConverter},RelativeSource={RelativeSource AncestorType={x:Type views:MainView}}}">
            <!--
              Visibility="{Binding IsEdgeHide,Converter={StaticResource bool2VisibilityConverter},RelativeSource={RelativeSource AncestorType={x:Type views:MainView}}}"-->
             
            <Rectangle Fill="{DynamicResource DefaultBackgroundBrush}"/>
            <StackPanel>
                <Button x:Name="borderExit" Width="20" Height="20"
                    Margin="0,2,0,0" ToolTip="Exit">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                            <i:InvokeCommandAction Command="{Binding DataContext.ExitCommand,RelativeSource={RelativeSource AncestorType=Window}}"></i:InvokeCommandAction>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <Path Data="{DynamicResource ClosePath}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}" 
                      Stretch="Fill" Width="10" Height="10" IsHitTestVisible="False"/>
                </Button>
                <!--<Line X1="0" Y1="1" X2="20" Y2="1" Stroke="White"/>-->
                <ToggleButton Style="{DynamicResource tbSwitchMiniAndNormal}"
                              x:Name="ToggleButtonMini"
                          Height="20" Width="20" IsChecked="False" Margin="0,2"
                              Checked="ToggleButtonMini_Checked"
                              Unchecked="UnToggleButtonMini_Checked">
                    <!--<ToggleButton.Triggers>
                        <EventTrigger RoutedEvent="ToggleButton.Checked">
                            <BeginStoryboard Storyboard="{DynamicResource WindowPutItAway}">
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                            <BeginStoryboard Storyboard="{DynamicResource WindowStretchOut}">
                            </BeginStoryboard>
                        </EventTrigger>
                    </ToggleButton.Triggers>-->
                </ToggleButton>

            </StackPanel>
        </Grid>


        <Grid x:Name="GridGround" Margin="30,10,0,14">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <CustomControls:SwitchMenu Grid.Row="1" ItemsSource="{Binding ApplicationList}" Orientation="Vertical"
                                       ItemTemplate="{StaticResource ApplicationTemplate}" IsDragDrop="{Binding IsDragDrop}"
                                       drag:DragDrop.UseDefaultDragAdorner="True" drag:DragDrop.DefaultDragAdornerOpacity="0.5"
                                       drag:DragDrop.IsDragSource="{Binding IsDragDrop}" drag:DragDrop.IsDropTarget="True"
                                       drag:DragDrop.ItemsPanelOrientation="Vertical">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseRightButtonDown">
                        <i:InvokeCommandAction Command="{Binding MouseRightDragCommand}"></i:InvokeCommandAction>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <!--
                       drag:DragDrop.UseDefaultDragAdorner="True"
                       drag:DragDrop.DefaultDragAdornerOpacity="0.5"
                       drag:DragDrop.IsDragSource="True"
                       drag:DragDrop.IsDropTarget="True"-->
            </CustomControls:SwitchMenu>
            <Grid Height="20" Margin="0,10"
                  Background="Transparent" 
                  Cursor="SizeAll">
                <Path Data="{DynamicResource DragPath}" Fill="{DynamicResource NormalWhiteBrush}" 
                      Stretch="Fill" Width="20" IsHitTestVisible="False"/>
            </Grid>
            <!--<Border x:Name="borderExit" Width="15" Height="15"
                    HorizontalAlignment="Right" VerticalAlignment="Top"
                    Margin="0,4,4,0" Cursor="Hand"
                    ToolTip="Exit" Background="Transparent">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDown">
                        <i:InvokeCommandAction Command="{Binding DataContext.ExitCommand,RelativeSource={RelativeSource AncestorType=Window}}"></i:InvokeCommandAction>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Border.Style>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=MyGrid, Path=IsMouseOver}" Value="True">
                                <Setter Property="Visibility" Value="Visible" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <Path Data="{DynamicResource ExitPath}" Fill="White" 
                      Stretch="Fill" Width="10" Height="10"/>
            </Border>-->
            <!--<Border x:Name="PutItAwayBorder" Width="15" Height="15"
                    HorizontalAlignment="Left" VerticalAlignment="Top"
                    Margin="4,4,0,0" Cursor="Hand" Background="Transparent"
                    ToolTip="Mini">
                <Border.Style>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=MyGrid, Path=IsMouseOver}" Value="True">
                                <Setter Property="Visibility" Value="Visible" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <Border.Triggers>
                    <EventTrigger RoutedEvent="Border.MouseDown">
                        <BeginStoryboard Storyboard="{DynamicResource WindowPutItAway}">
                        </BeginStoryboard>
                    </EventTrigger>
                </Border.Triggers>
                <Path Data="{DynamicResource PutItAwayPath}" Fill="White" 
                      Stretch="Fill" Width="10" Height="10"/>
            </Border>

            <Border x:Name="StretchOutBorder" Width="15" Height="15"
                    HorizontalAlignment="Left" VerticalAlignment="Top"
                    Margin="4,4,0,0" Cursor="Hand" Background="Transparent"
                    ToolTip="还原" Opacity="0" Visibility="Collapsed">
                <Border.Style>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Visibility" Value="Collapsed"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=MyGrid, Path=IsMouseOver}" Value="True">
                                <Setter Property="Visibility" Value="Visible" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <Border.Triggers>
                    <EventTrigger RoutedEvent="Border.MouseDown">
                        <BeginStoryboard Storyboard="{DynamicResource WindowStretchOut}">
                        </BeginStoryboard>
                    </EventTrigger>
                </Border.Triggers>
                <Path Data="{DynamicResource StretchOutPath}" Fill="White" 
                      Stretch="Fill" Width="10" Height="10"/>
            </Border>-->
            <!--<ToggleButton Style="{DynamicResource tbSwitchMiniAndNormal}"
                          HorizontalAlignment="Left" VerticalAlignment="Center"
                          Height="20" Width="20" IsChecked="False">
                <ToggleButton.Triggers>
                    <EventTrigger RoutedEvent="ToggleButton.Checked">
                        <BeginStoryboard Storyboard="{DynamicResource WindowPutItAway}">
                        </BeginStoryboard>
                    </EventTrigger>
                    <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                        <BeginStoryboard Storyboard="{DynamicResource WindowStretchOut}">
                        </BeginStoryboard>
                    </EventTrigger>
                </ToggleButton.Triggers>
            </ToggleButton>-->

            <Line X1="0" Margin="10,0" Y1="1" X2="80" Y2="1" Stroke="{DynamicResource NormalWhiteBrush}" VerticalAlignment="Bottom"/>

        </Grid>
    </Grid>
</Window>
